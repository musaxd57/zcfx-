import requests
import time
import webbrowser
import os

# Etherscan API Anahtarını Buraya Gir
ETHERSCAN_API_KEY = "YOUR_ETHERSCAN_API_KEY"
BASE_URL = "https://api.etherscan.io/api"

# Yeni oluşturulmuş tokenleri almak için fonksiyon
def get_new_tokens():
    url = f"{BASE_URL}?module=account&action=tokentx&address=0x0&startblock=latest&apikey={ETHERSCAN_API_KEY}"
    response = requests.get(url).json()
    return response.get("result", [])

# Token sahiplerini kontrol eden fonksiyon
def check_token_holders(token_address, token_name):
    url = f"{BASE_URL}?module=token&action=tokenholderlist&contractaddress={token_address}&apikey={ETHERSCAN_API_KEY}"
    response = requests.get(url).json()
    holders = response.get("result", [])
    
    if not holders:
        return False  # Holder bilgisi yoksa geç
    
    total_supply = sum(int(h["balance"]) for h in holders)
    for holder in holders:
        percentage = (int(holder["balance"]) / total_supply) * 100
        holder_name = holder.get("address", "").lower()

        # Eğer token ismi veya etiketinde token adı geçiyorsa, %30'a kadar izin ver
        if token_name.lower() in holder_name and percentage <= 30:
            return True
        # Eğer bir holder %15'ten fazlaysa bu tokeni geç
        if percentage > 15:
            return False

    return True

# Piyasaya çıkmamış ve uygun tokenleri listeleyen fonksiyon
def find_valid_tokens():
    valid_tokens = []
    new_tokens = get_new_tokens()
    
    for token in new_tokens:
        token_address = token["contractAddress"]
        token_name = token.get("tokenName", "")
        
        if check_token_holders(token_address, token_name):
            valid_tokens.append(token_address)
        
        if len(valid_tokens) >= 15:
            break  # 15 token bulunca dur
        
        time.sleep(1)  # API limiti aşmamak için bekleme
    
    return valid_tokens

# HTML dosyasını oluşturmak için fonksiyon
def generate_html(tokens):
    html_content = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Valid Tokens List</title>
    </head>
    <body>
        <h1>Valid Tokens</h1>
        <ul>
    """
    for token in tokens:
        html_content += f"<li><a href='https://etherscan.io/token/{token}' target='_blank'>{token}</a></li>"

    html_content += """
        </ul>
    </body>
    </html>
    """
    return html_content

# Ana fonksiyon
if __name__ == "__main__":
    tokens = find_valid_tokens()
    if tokens:
        html_output = generate_html(tokens)
        # HTML içeriğini bir dosyaya yaz
        html_file_path = "valid_tokens.html"  # Dosya yolu
        with open(html_file_path, "w") as file:
            file.write(html_output)
        print(f"HTML dosyası başarıyla oluşturuldu: {html_file_path}")

        # HTML dosyasını tarayıcıda aç
        try:
            # Dosyanın tam yolu ile açmaya çalışıyoruz
            file_path = os.path.abspath(html_file_path)  # Dosya yolu alınır
            webbrowser.open(f"file://{file_path}", new=2)  # Tarayıcıda açmak için dosya yolunu kullan
        except Exception as e:
            print(f"Bir hata oluştu: {e}")
    else:
        print("Geçerli token bulunamadı.")
